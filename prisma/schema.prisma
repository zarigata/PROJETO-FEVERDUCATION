// /////////////////////////////////////////////////////////////////////////////
// //                                                                         //
// //  [FEVERDUCATION] - Prisma Database Schema                               //
// //  ---------------------------------------------------------------        //
// //  This file defines the database schema for the FeverEducation           //
// //  application, including models for teachers, students, classes,         //
// //  and educational data.                                                  //
// //                                                                         //
// //  CODEX LEVEL: ALPHA-7                                                   //
// //  VERSION: 1.0.0                                                         //
// //  PLATFORM: CROSS-COMPATIBLE (WIN/LINUX)                                 //
// //                                                                         //
// /////////////////////////////////////////////////////////////////////////////

// Database connection configuration
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - base for both teachers and students
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  name         String
  avatar       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  teacher      Teacher?
  student      Student?
  
  @@map("users")
}

// Teacher model
model Teacher {
  id           String   @id @default(uuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio          String?
  subjects     String[] // Array of subjects they teach
  yearsOfExp   Int?
  institution  String?
  department   String?
  
  classes      Class[]
  materials    Material[]
  generatedContent GeneratedContent[]
  
  @@map("teachers")
}

// Student model
model Student {
  id           String   @id @default(uuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gradeLevel   String?
  bio          String?
  
  classes      ClassStudent[]
  attendances  Attendance[]
  grades       Grade[]
  activities   Activity[]
  
  @@map("students")
}

// Class model
model Class {
  id           String   @id @default(uuid())
  name         String
  subject      String
  description  String?
  startDate    DateTime?
  endDate      DateTime?
  schedule     Json?    // JSON object with weekly schedule
  teacherId    String
  teacher      Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  students     ClassStudent[]
  modules      Module[]
  lessons      Lesson[]
  materials    Material[]
  assignments  Assignment[]
  
  @@map("classes")
}

// Class-Student relationship
model ClassStudent {
  id           String   @id @default(uuid())
  classId      String
  class        Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  studentId    String
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  joinedAt     DateTime @default(now())
  
  @@unique([classId, studentId])
  @@map("class_students")
}

// Educational module within a class
model Module {
  id           String   @id @default(uuid())
  title        String
  description  String?
  order        Int
  classId      String
  class        Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  
  lessons      Lesson[]
  
  @@map("modules")
}

// Lesson within a module
model Lesson {
  id           String   @id @default(uuid())
  title        String
  content      String
  duration     Int?     // in minutes
  moduleId     String?
  module       Module?  @relation(fields: [moduleId], references: [id], onDelete: SetNull)
  classId      String
  class        Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  materials    Material[]
  assignments  Assignment[]
  
  @@map("lessons")
}

// Educational material
model Material {
  id           String   @id @default(uuid())
  title        String
  description  String?
  type         String   // e.g., "document", "video", "quiz"
  url          String?
  content      String?
  teacherId    String
  teacher      Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  classId      String?
  class        Class?   @relation(fields: [classId], references: [id], onDelete: SetNull)
  lessonId     String?
  lesson       Lesson?  @relation(fields: [lessonId], references: [id], onDelete: SetNull)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("materials")
}

// Assignment model
model Assignment {
  id           String   @id @default(uuid())
  title        String
  description  String
  dueDate      DateTime?
  classId      String
  class        Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  lessonId     String?
  lesson       Lesson?  @relation(fields: [lessonId], references: [id], onDelete: SetNull)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  submissions  Submission[]
  grades       Grade[]
  
  @@map("assignments")
}

// Submission model
model Submission {
  id           String   @id @default(uuid())
  content      String
  comment      String?
  submittedAt  DateTime @default(now())
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  
  @@map("submissions")
}

// Attendance record
model Attendance {
  id           String   @id @default(uuid())
  date         DateTime
  status       String   // e.g., "PRESENT", "ABSENT", "EXCUSED"
  notes        String?
  studentId    String
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@map("attendances")
}

// Grade record
model Grade {
  id           String   @id @default(uuid())
  score        Float
  maxScore     Float
  feedback     String?
  gradedAt     DateTime @default(now())
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  studentId    String
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@map("grades")
}

// Student activity record for engagement tracking
model Activity {
  id           String   @id @default(uuid())
  type         String   // e.g., "QUESTION", "PARTICIPATION", "HOMEWORK"
  description  String?
  timestamp    DateTime @default(now())
  studentId    String
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@map("activities")
}

// AI-generated content
model GeneratedContent {
  id           String   @id @default(uuid())
  type         String   // e.g., "LESSON_PLAN", "QUIZ", "HANDOUT"
  content      String   // Stored as Markdown
  prompt       String?  // The original prompt used to generate
  metadata     Json?    // Additional metadata
  teacherId    String
  teacher      Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  
  @@map("generated_content")
}
